// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Energinet.DataHub.Aggregations.Infrastructure.Persistence
{
    public partial class MasterDataContext : DbContext
    {
        public MasterDataContext()
        {
        }

        public MasterDataContext(DbContextOptions<MasterDataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Charge> Charge { get; set; }
        public virtual DbSet<ChargeLink> ChargeLink { get; set; }
        public virtual DbSet<ChargePrice> ChargePrice { get; set; }
        public virtual DbSet<EnergySupplier> EnergySupplier { get; set; }
        public virtual DbSet<EsBrpRelation> EsBrpRelation { get; set; }
        public virtual DbSet<GridLossSysCorr> GridLossSysCorr { get; set; }
        public virtual DbSet<MeteringPoint> MeteringPoint { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Charge>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.HasIndex(e => new { e.ChargeKey, e.FromDate }, "chUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.ChargeId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ChargeKey).HasMaxLength(255);

                entity.Property(e => e.ChargeOwnerId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChargeLink>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.HasIndex(e => new { e.ChargeKey, e.MeteringPointId, e.FromDate }, "chlkUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.ChargeKey).HasMaxLength(255);

                entity.Property(e => e.MeteringPointId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChargePrice>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.HasIndex(e => new { e.ChargeKey, e.Time }, "chprUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.ChargeKey).HasMaxLength(255);

                entity.Property(e => e.ChargePrice1)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("ChargePrice");
            });

            modelBuilder.Entity<EnergySupplier>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("PK_MarketRole");

                entity.HasIndex(e => new { e.EnergySupplierId, e.MeteringPointId, e.FromDate }, "mrUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.EnergySupplierId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeteringPointId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EsBrpRelation>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.HasIndex(e => new { e.EnergySupplierId, e.BalanceResponsibleId, e.GridArea, e.MeteringPointType, e.FromDate }, "ebrUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.BalanceResponsibleId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EnergySupplierId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GridArea)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GridLossSysCorr>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.HasIndex(e => new { e.MeteringPointId, e.GridArea, e.EnergySupplierId, e.FromDate }, "glscUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.EnergySupplierId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GridArea)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeteringPointId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MeteringPoint>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.HasIndex(e => new { e.MeteringPointId, e.FromDate }, "mpUnique")
                    .IsUnique();

                entity.Property(e => e.RowId).ValueGeneratedNever();

                entity.Property(e => e.GridArea)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InGridArea).HasMaxLength(50);

                entity.Property(e => e.MeteringPointId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OutGridArea).HasMaxLength(50);

                entity.Property(e => e.ParentMeteringPointId).HasMaxLength(50);

                entity.Property(e => e.Product).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}